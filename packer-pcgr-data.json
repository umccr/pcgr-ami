# use Amazon EBS volume builder: provision EBS volume, upload data, then destroy instance (and volume leaving only the snapshot)
# check if snapshot remains
# check snapshot ID retrieval or tagging
# check how to inject snapshot ID (or lookup strategy) into PCGR AMI

{
  "variables": {
    "commit_id": "{{env `TRAVIS_COMMIT`}}",
    "commit_msg": "{{env `TRAVIS_COMMIT_MESSAGE`}}",
    "custom_ami_name": "pcgr-ami",
    "ssh_username": "ubuntu"
  },
  "builders": [
    {
      "type"                   : "amazon-ebsvolume",
      "instance_type"          : "t2.medium",
      "source_ami"             : "ami-fbb66399",
      "region"                 : "uap-southeast-2",
      "spot_price"             : "auto",
      "spot_price_auto_product": "Linux/UNIX",
      "ssh_username"           : "{{user `ssh_username`}}",
      "ebs_volumes" : [
        {
          "volume_type"           : "gp2",
          "device_name"           : "/dev/xvdf",
          "delete_on_termination" : false,
          "volume_size"           : 35,
          "tags" : {
            "Name"  : "{{user `custom_ami_name`}}-data",
            "commit": "{{user `commit_id`}}",
          }
        }
      ]
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "execute_command": "echo 'packer' | sudo -S sh -c '{{ .Vars }} {{ .Path }}'",
      "inline": [
        "lsblk",
        "sudo mount /dev/xvdf /mnt"
      ]
    },
    {
      "type": "ansible",
      "extra_arguments": [ "--extra-vars", "ansible_python_interpreter=/usr/bin/python3"],
      "playbook_file": "/tmp/pcgr-deploy/ansible/databundle.yml"
    }
  ]
}
